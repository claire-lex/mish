#!/bin/bash
# Mish netcommand file
# Lex @ https://github.com/claire-lex/mish - 2022-2024
#
# Mish: Shell environment for penetration tests.
#
# This file contains network discovery functions usable when mishrc is sourced.
# These functions can be used even if mish's pentest environment is off.
# Help: mish help

################################################################################
# CONFIG                                                                       #
################################################################################

MISH_ALIAS="mish"
THREAD_LIMIT=256 # Arbitrary, for additional protection. Feel free to change it.
NETCOMMAND_LIST="show list ping host printer screen web vnc rdp admin"

# Default values for arguments
ARG_COMMAND=""
ARG_IPRANGE=""
ARG_MAXTHREAD=256 # Default value, change with -t [number]
ARG_NOFILE=false # Set to true with -n: prevents from writing results to a file.
ARG_OUTPUTFILE="" # Change with -o [filename]
ARG_ENGLISH=false # Set to true to use english words instead of french ones.
# For "screen"
ARG_PORTS="80,443,8000,8080,8888"
# For "admin"
ARG_DOMAIN=""
ARG_USER=""
ARG_PASSWD=""

# Environment variables to use
ENV_MISHIP=$MISHIP
ENV_MISHIFACE=$MISHIFACE
ENV_MISHCMD=$MISHCMD

# Other internal configuration
SCREEN_FOLDER="screens"
SCREEN_SIZE="1366x768"
SCREEN_TIMEOUT="3s"

# Messages
HELP="Usage: $MISH_ALIAS [$NETCOMMAND_LIST] [-n -o [outfile] -t [threadnumber]]"

ERROR_COMMAND="Command not found (available: $NETCOMMAND_LIST)."
ERROR_THREAD="Invalid value for -t (must be between 0 and $THREAD_LIMIT)."
ERROR_IPRANGE="The list of IP addresses is empty."

################################################################################
# SIDE FUNCTIONS                                                               #
################################################################################

function OUTPUT {
    echo "$*"
    if ! $ARG_NOFILE; then
	echo "$*" >> $ARG_OUTPUTFILE
    fi
}

function ERROR {
    >&2 echo "ERROR: $*" 
}

function EXIT {
    # Wait for all threads to finish
    wait

    if ! $ARG_NOFILE; then
	echo "Results are stored in: $ARG_OUTPUTFILE"
    fi
    exit
}
# Catch Ctrl+c to exit properly
trap EXIT SIGINT

################################################################################
# FUNCTIONS TO RUN ON RANGES :)                                                #
################################################################################

function help {
    echo "\
show	Display a collection of information about the current network
list    List all IP addresses in a range
ping    Run ping on a range
host	Run host on a range
printer Check if print spooler services are enabled on a Windows host with RPC
screen	Screenshot web, RDP and VNC screens on a range
	separated commands to run only one option: web, vnc, rdp
	additional args: -p [VNC pwd], --ports [web ports (default: $ARG_PORTS)]
admin   Extract the list of local administrators on Windows hosts on a range
	additional args: -d [domain] -u [username] -p [password] [-en]

 options to netcommands:
-n 	Do not store results to a file
-o name Change the name of the output file (default: <range>.<cmd>.<date>.mish): 
-t num  Number of threads to use (default is $ARG_MAXTHREAD)

$HELP
These netcommands run basic network discovery commands on a range
(multithreaded) and output the results to a file (by default).

"
}

#--- Show ---------------------------------------------------------------------#

function mish_show_nmcli {
    nmcli="$(nmcli dev show $ENV_MISHIFACE)"
    if [[ $? != 0 ]]; then
	ERROR "Interface is invalid ($ENV_MISHIFACE)"
	exit
    fi
    macaddr=$(echo "$nmcli" | grep "GENERAL.HWADDR" | tr -s " " | cut -d' ' -f2)
    OUTPUT "NETWORK INFORMATION FOR $ENV_MISHIP ($ENV_MISHIFACE, $macaddr)"
    OUTPUT ""
    conn=$(echo "$nmcli" | grep "GENERAL.CONNECTION" | tr -s " " | cut -d' ' -f2)
    OUTPUT "$(printf "%-20s: %s\n" "Connection" "$conn")"
    ip4addr=$(echo "$nmcli" | grep "IP4.ADDRESS" | tr -s " " | cut -d' ' -f2)
    OUTPUT "$(printf "%-20s: %s\n" "IPv4 address" "$ip4addr")"
    ip4gw=$(echo "$nmcli" | grep "IP4.GATEWAY" | tr -s " " | cut -d' ' -f2)
    OUTPUT "$(printf "%-20s: %s\n" "Gateway" "$ip4gw")"
    ip4dns=$(echo "$nmcli" | grep "IP4.DNS" | tr -s " " | cut -d' ' -f2)
    OUTPUT "$(printf "%-20s: %s\n" "DNS" "$ip4dns")"
    ip4route=$(echo "$nmcli" | grep "IP4.ROUTE" | tr -s " " | cut -d' ' -f4 | tr -d "\n" | tr "," " ")
    OUTPUT "$(printf "%-20s: %s\n" "Route" "$ip4route")"
    domain=$(echo "$nmcli" | grep "IP4.DOMAIN" | tr -s " " | cut -d' ' -f2)
    OUTPUT "$(printf "%-20s: %s\n" "Domain" "$domain")"
    if [[ -n $domain ]]; then
	dc=$(nslookup $domain | grep "Address" | tr "\t" " " | cut -d' ' -f2 | tr "\n" " ")
	OUTPUT "$(printf "%-20s: %s\n" "DC" "$dc")"
    fi
    OUTPUT ""
}

function mish_show_dns {
    OUTPUT "DNS information (nslookup):"
    nslookup_ext="$(nslookup google.com)"
    server=$(echo "$nslookup_ext" | grep "Server" | tr -d '\t'| cut -d: -f2)
    addr=$(echo "$nslookup_ext" | grep "Address" | head -n1 | tr -d '\t'| cut -d: -f2)
    OUTPUT "$(printf "%-20s: %s\n" "Server" "$server ($addr)")"
    # Do we have a DNS for server?
    host="$(host -t ns $server)"
    if [[ $? == 0 ]]; then
	OUTPUT $host
	nslookup_int="$(nslookup $server)"
	OUTPUT $nslookup_int # En attendant meilleurs r√©sultats
    fi
    OUTPUT ""
}

function mish_show {
    if [[ -z $ENV_MISHIFACE ]]; then
	ERROR "No interface selected (is mish enabled?)"
	exit
    fi
    # Global network info with nmcli dev show <iface>
    mish_show_nmcli
    # Nameservers (and DC) info with nslookup and host
    mish_show_dns
    # The next commands require sudoers privileges
    netbios="$(sudo nbtscan -r $ip4addr 2>/dev/null)"
    if [[ $? == 0 ]]; then
	OUTPUT "$netbios"
    fi
}

#--- Ping ---------------------------------------------------------------------#

function mish_ping {
  ip=$1
  ping -c 1 $ip > /dev/null 2>&1
  if [ $? -eq 0 ]; then
      OUTPUT "$ip"
  fi
}

#--- Host ---------------------------------------------------------------------#

function mish_host {
    out=$(host $1)
    if [ $? -eq 00 ]; then
	OUTPUT "$ip: $(echo ${out%%\.} | awk '/domain name pointer/{print $NF}')"
    fi
}

#--- Printer ------------------------------------------------------------------#

function mish_printer {
    ip=$1
    rpcdump.py $ip | egrep 'MS-RPRN|MS-PAR' > /dev/null 2>&1
    if [ $? -eq 0 ]; then
	OUTPUT "$ip"
    fi
}

#--- Screen -------------------------------------------------------------------#

function mish_screenpath {
    if [[ "$ENV_MISHCMD" != "" ]]; then
	if [[ "$ENV_MISHIP" != "" ]]; then
	    mkdir -p "$ENV_MISHCMD/$ENV_MISHIP/$SCREEN_FOLDER"
	    echo "$ENV_MISHCMD/$ENV_MISHIP/$SCREEN_FOLDER/"
	else
	    mkdir -p "$ENV_MISHCMD/$SCREEN_FOLDER"
	    echo "$ENV_MISHCMD/$SCREEN_FOLDER/"
	fi
    else
	mkdir -p "$(pwd)/$SCREEN_FOLDER"
	echo "$(pwd)/$SCREEN_FOLDER/"
    fi
}

function mish_screen_web {
    IFS=',' # Internal Field Separator
    for port in $ARG_PORTS; do
	for proto in $(echo "http,https"); do
	    filename="$(mish_screenpath)$1_$port.$proto.web.png"
	    # Check if page exists
	    curl --fail --silent --output /dev/null --connect-timeout 1 "$proto://$1:$port"
	    if [ $? -eq 00 ]; then
		chromium --headless --screenshot="$filename" --window-size="$SCREEN_SIZE" "$proto://$1:$port" > /dev/null 2>&1
		# Alternative that does not work well: firefox -p headless
		# --no-remote --screenshot "$filename" --window-size
		# "$SCREEN_WIDTH" "$proto://$1:$port" > /dev/null 2>&1
		OUTPUT "[WEB] $proto://$1:$port ($filename)"
	    fi
	done
    done
    unset IFS
}

function mish_screen_rdp {
    # We relied mostly on this project for this feature:
    # https://github.com/zer0-t/RDP-screenshotter
    filename="$(mish_screenpath)$1.rdp.jpg"
    # Check if port open
    if nc -w1 -zv "$1" 3389 &> /dev/null; then
	export DISPLAY=:0
	rdesktop -u "" "$1"  > /dev/null 2>&1 &
	pid=$!
	# Check if we keep the connection open and can retrieve the window id
	while true; do
	    kill -0 $pid 2>/dev/null
	    if [ $? -eq 1 ]; then
		OUTPUT "[RDP] $1 seems to have RDP open but no screenshot taken (NLA enabled?)."
		return
	    fi
	    window=$(xdotool search --name "$1")
	    if [ ! "$window" = "" ]; then
		break
	    fi
	    sleep 0.1
	done
	# Good, screenshot time, we wait for it to load
	sleep 2
	import -quiet -window $window $filename
	if [ $? -eq 00 ]; then
	    OUTPUT "[RDP] $1 ($filename)"
	fi
	kill $pid > /dev/null 2>&1
}

function mish_screen_vnc {
    # Without password (we do it even if password specified)
    filename="$(mish_screenpath)$1.vnc.jpg"
    # Check if port open
    if nc -w1 -zv "$1" 5900 &> /dev/null; then
	ok=0
	# We need timeout because vncsnapshot does not know how to stop
	timeout "$SCREEN_TIMEOUT" vncsnapshot -quiet "$1" "$filename" > /dev/null 2>&1
	if [ $? -eq 00 ]; then
	    OUTPUT "[VNC] $1 ($filename)"
	    ok=1
	fi
	# With password
	if [[ -n "$ARG_PASSWD" ]]; then
	    echo "$ARG_PASSWD" | vncpasswd -f > "$filename.pwd"
	    timeout "$SCREEN_TIMEOUT" vncsnapshot -quiet -passwd "$filename.pwd" "$1" "$filename" > /dev/null 2>&1
	    if [ $? -eq 00 ]; then
		OUTPUT "[VNC] $1 ($filename)"
		# We keep the password in a separate file to know it works for this IP
		echo "$ARG_PASSWD" > "$filename.pwd"
		ok=1
	    else
		rm -f "$filename.pwd"
	    fi
	fi
	if [[ $ok == 0 ]]; then
	    OUTPUT "[VNC] $1 seems to have VNC open but no screenshot taken (wrong password?)."
	fi
    fi
}

function mish_screen {
    mish_screen_web $1
    mish_screen_rdp $1
    mish_screen_vnc $1
}

#--- Admin ---------------------------------------------------------------------#

function mish_admin {
    ip=$1
    adm="Administrateurs"
    if $ARG_ENGLISH; then
	adm="Administrators"
    fi
    out=$(net rpc group members $adm -W $ARG_DOMAIN -U $ARG_DOMAIN\\$ARG_USER%$ARG_PASSWD -I $ip)
    if [ $? -eq 00 ]; then
	OUTPUT "--- $ip ---"
	OUTPUT "$out"
    fi
}

################################################################################
# MAIN PROGRAM                                                                 #
################################################################################

#--- Read arguments -----------------------------------------------------------#

# The first argument should be the command to run on range
if [[ $# -eq 0 ]]; then
    ERROR "$ERROR_COMMAND"
    exit
fi

if [[ $1 == "help" ]]; then
    help
    exit
elif echo "$NETCOMMAND_LIST" | grep -qw $1; then
    ARG_COMMAND="$1"
    shift
else
    ERROR "$ERROR_COMMAND"
    exit
fi

# Then read the rest
while [[ $# -gt 0 ]]; do
    case "$1" in
	-t|--thread)
	    shift
	    if [[ "$1" =~ ^[0-9]+$ ]]; then
	       if [[ "$1" -ge 0 && "$1" -lt $THREAD_LIMIT ]]; then
		   ARG_MAXTHREAD="$1"
	       else
		   ERROR "$ERROR_THREAD"
	       fi
	    fi
	    shift
	    ;;
	-n|--nofile)
	    ARG_NOFILE=true
	    shift
	    ;;
	-o|--output)
	    shift
	    ARG_OUTPUTFILE="$1"
	    shift
	    ;;
	-en|--english)
	    ARG_ENGLISH=true
	    shift
	    ;;
	-d|--domain)
	    shift
	    ARG_DOMAIN="$1"
	    shift
	    ;;
	-u|--user)
	    shift
	    ARG_USER="$1"
	    shift
	    ;;
	-p|--password)
	    shift
	    ARG_PASSWD="$1"
	    shift
	    ;;
	--ports)
	    shift
	    ARG_PORTS="$1"
	    shift
	    ;;
	*)
	    # Should be the IP address, we don't check for it and let nmap see
	    # if it is valid, otherwise the regex would be too complicated to
	    # cover all accepted formats.
	    ARG_IPRANGE="$1"
	    shift
	    ;;
    esac
done

#--- Prepare command to run ---------------------------------------------------#

COMMAND=""
if [[ $ARG_COMMAND == "ping" ]]; then
    COMMAND=mish_ping
elif [[ $ARG_COMMAND == "host" ]]; then
    COMMAND=mish_host
elif [[ $ARG_COMMAND == "screen" ]]; then
    COMMAND=mish_screen
elif [[ $ARG_COMMAND == "web" ]]; then
    COMMAND=mish_screen_web
elif [[ $ARG_COMMAND == "vnc" ]]; then
    COMMAND=mish_screen_vnc
elif [[ $ARG_COMMAND == "rdp" ]]; then
    COMMAND=mish_screen_rdp
elif [[ $ARG_COMMAND == "admin" ]]; then
    if [[ -z $ARG_DOMAIN || -z $ARG_USER || -z $ARG_PASSWD ]]; then
	ERROR "Missing arguments for \"admin\" mode (requires -d, -u, -p)."
	exit
    fi
    COMMAND=mish_admin
elif [[ $ARG_COMMAND == "printer" ]]; then
    COMMAND=mish_printer
fi

#--- Prepare IP list with nmap ------------------------------------------------#

# We don't need an IP range for show
if [[ $ARG_COMMAND != "show" ]]; then
    IPLIST=$(nmap -sL -n "$ARG_IPRANGE" | awk '/Nmap scan report/{print $NF}')
    # Error check before going further :)
    if [[ -z $IPLIST ]]; then
	ERROR "$ERROR_IPRANGE"
	exit
    fi
else
    # We set the IP range so that it is our IP (for filename)
    if [[ -z $ENV_MISHIP ]]; then
	ERROR "IP address is not set (is mish enabled?)"
	exit
    fi
    ARG_IPRANGE="$ENV_MISHIP"
fi

#--- Prepare output file if -n not set ----------------------------------------#

if ! $ARG_NOFILE; then
    if [[ -z $ARG_OUTPUTFILE ]]; then
	outrange=$(echo "$ARG_IPRANGE" | sed -r 's/[/]+/_/g')
	ARG_OUTPUTFILE="$outrange.$ARG_COMMAND.`date +%Y%m%d-%H%M%S`.$MISH_ALIAS"
    fi
    # Output files are stored to the env's current traces dir if enabled.
    # If not, files are stored on the current working directory.
    if [[ "$ENV_MISHCMD" != "" ]]; then
	# If the source IP address is set on current interface, we store traces
	# in a subfolder with the IP source, otherwire directly in traces folder.
	if [[ "$ENV_MISHIP" != "" ]]; then
	    mkdir -p "$ENV_MISHCMD/$ENV_MISHIP/"
	    ARG_OUTPUTFILE="$ENV_MISHCMD/$ENV_MISHIP/$ARG_OUTPUTFILE"
	else
	    ARG_OUTPUTFILE="$ENV_MISHCMD/$ARG_OUTPUTFILE"
	fi
    fi
    touch "$ARG_OUTPUTFILE"
fi

#--- If command is "show", we only give network information and don't loop ----#

if [[ $ARG_COMMAND == "show" ]]; then
    mish_show
    exit
fi

#--- If command is "list", mish stops here and just return the result ---------#

if [[ $ARG_COMMAND == "list" ]]; then
    OUTPUT "$IPLIST"
    exit
fi    

#--- Loop over the IP range and spawn background tasks up to $ARG_MAXTHREAD ---#

for ip in $IPLIST; do
    # If max number of threads is reached, wait
    while [[ $(jobs -r | wc -l) -gt $ARG_MAXTHREAD ]]; do
	sleep 1
    done
    $COMMAND $ip &
done

EXIT
