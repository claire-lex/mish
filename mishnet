#!/bin/bash

################################################################################
# CONFIG                                                                       #
################################################################################

MISH_ALIAS="mish"
THREAD_LIMIT=256 # Arbitrary, for additional protection. Feel free to change it.
NETCOMMAND_LIST="ping host"

# Default values for arguments
ARG_COMMAND=""
ARG_IPRANGE=""
ARG_MAXTHREAD=256 # Default value, change with -t [number]
ARG_NOFILE=false # Set to true with -n: prevents from writing results to a file.
ARG_OUTPUTFILE="" # Change with -o [filename]

# Messages
HELP="Usage: $MISH_ALIAS [$NETCOMMAND_LIST] [-n -o [outfile] -t [threadnumber]]"

ERROR_COMMAND="Command not found (available: $NETCOMMAND_LIST)."
ERROR_THREAD="Invalid value for -t (must be between 0 and $THREAD_LIMIT)."
ERROR_IPRANGE="The list of IP addresses is empty."

################################################################################
# SIDE FUNCTIONS                                                               #
################################################################################

function OUTPUT {
    echo "$*"
    if ! $ARG_NOFILE; then
	echo "$*" >> $ARG_OUTPUTFILE
    fi
}

function ERROR {
    >&2 echo "ERROR: $*" 
}

function EXIT {
    # Wait for all threads to finish
    wait

    if ! $ARG_NOFILE; then
	echo "Results are stored in: $ARG_OUTPUTFILE"
    fi
    exit
}
# Catch Ctrl+c to exit properly
trap EXIT SIGINT

################################################################################
# FUNCTIONS TO RUN ON RANGES :)                                                #
################################################################################

function help {
    echo "\
ping    Run ping on a range
host	Run host on a range

 options to netcommands:
-n 	Do not store results to a file
-o name Change the name of the output file (default: <range>.<date>.<cmd>.mish): 
-t num  Number of threads to use (default is $ARG_MAXTHREAD)

$HELP
These netcommands run a basic network discovery commands on a range
(multithreaded) and output the results to a file (by default).

"
}

#--- Ping ---------------------------------------------------------------------#

function mish_ping {
  ip=$1
  ping -c 1 $ip > /dev/null 2>&1
  if [ $? -eq 0 ]; then
      OUTPUT "$ip"
  fi
}

function mish_host {
    out=$(host $1)
    if [ $? -eq 00 ]; then
	OUTPUT "$ip: $(echo ${out%%\.} | awk '/domain name pointer/{print $NF}')"
    fi
}

################################################################################
# MAIN PROGRAM                                                                 #
################################################################################

#--- Read arguments -----------------------------------------------------------#

# The first argument should be the command to run on range
if [[ $# -eq 0 ]]; then
    ERROR "$ERROR_COMMAND"
    exit
fi

if [[ $1 == "help" ]]; then
    help
    exit
elif echo "$NETCOMMAND_LIST" | grep -qw $1; then
    ARG_COMMAND="$1"
    shift
else
    ERROR "$ERROR_COMMAND"
    exit
fi

# Then read the rest
while [[ $# -gt 0 ]]; do
    case "$1" in
	-t|--thread)
	    shift
	    if [[ "$1" =~ ^[0-9]+$ ]]; then
	       if [[ "$1" -ge 0 && "$1" -lt $THREAD_LIMIT ]]; then
		   ARG_MAXTHREAD="$1"
	       else
		   ERROR "$ERROR_THREAD"
	       fi
	    fi
	    shift
	    ;;
	-n|--nofile)
	    ARG_NOFILE=true
	    shift
	    ;;
	-o|--output)
	    shift
	    ARG_OUTPUTFILE="$1"
	    shift
	    ;;
	*)
	    # Argument principal : IPv4 ou range au format A.B.C.D/R
	    if [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/[0-9]+)?$ ]]; then
		ARG_IPRANGE="$1"
	    else
		ERROR "Error: Unknown argument: $1."
		exit
	    fi
	    shift
	    ;;
    esac
done

#--- Prepare command to run ---------------------------------------------------#

COMMAND=""
if [[ $ARG_COMMAND == "ping" ]]; then
    COMMAND=mish_ping
elif [[ $ARG_COMMAND == "host" ]]; then
    COMMAND=mish_host
fi

#--- Prepare IP list with nmap ------------------------------------------------#

IPLIST=$(nmap -sL -n "$ARG_IPRANGE" | awk '/Nmap scan report/{print $NF}')

# Error check before going further :)
if [[ -z $IPLIST ]]; then
    ERROR "$ERROR_IPRANGE"
    exit
fi

#--- Prepare output file if -n not set ----------------------------------------#

if ! $ARG_NOFILE; then
    if [[ -z $ARG_OUTPUTFILE ]]; then
	outrange=$(echo "$ARG_IPRANGE" | sed -r 's/[/]+/_/g')
	ARG_OUTPUTFILE="$outrange.`date +%Y%m%d-%H%M%S`.$ARG_COMMAND.$MISH_ALIAS"
	touch "$ARG_OUTPUTFILE"
    fi
fi

#--- Loop over the IP range and spawn background tasks up to $ARG_MAXTHREAD ---#

for ip in $IPLIST; do
    # If max number of threads is reached, wait
    while [[ $(jobs -r | wc -l) -gt $ARG_MAXTHREAD ]]; do
	sleep 1
    done
    $COMMAND $ip &
done

EXIT
