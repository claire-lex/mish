#!/bin/bash
# Mish RC file
# Lex @ https://github.com/claire-lex/mish - 2022-2023
#
# Mish: Shell environment for penetration tests.
#
# This file contains network discovery functions usable when mishrc is sourced.
# These functions can be used even if mish's pentest environment is off.
# Help: mish help

################################################################################
# CONFIG                                                                       #
################################################################################

MISH_ALIAS="mish"
THREAD_LIMIT=256 # Arbitrary, for additional protection. Feel free to change it.
NETCOMMAND_LIST="list ping host admin"

# Default values for arguments
ARG_COMMAND=""
ARG_IPRANGE=""
ARG_MAXTHREAD=256 # Default value, change with -t [number]
ARG_NOFILE=false # Set to true with -n: prevents from writing results to a file.
ARG_OUTPUTFILE="" # Change with -o [filename]
ARG_ENGLISH=false # Set to true to use english words instead of french ones.
# For "admin"
ARG_DOMAIN=""
ARG_USER=""
ARG_PASSWD=""

# Environment variables to use
ENV_MISHCMD=$MISHCMD
ENV_MISHIP=$MISHIP

# Messages
HELP="Usage: $MISH_ALIAS [$NETCOMMAND_LIST] [-n -o [outfile] -t [threadnumber]]"

ERROR_COMMAND="Command not found (available: $NETCOMMAND_LIST)."
ERROR_THREAD="Invalid value for -t (must be between 0 and $THREAD_LIMIT)."
ERROR_IPRANGE="The list of IP addresses is empty."

################################################################################
# SIDE FUNCTIONS                                                               #
################################################################################

function OUTPUT {
    echo "$*"
    if ! $ARG_NOFILE; then
	echo "$*" >> $ARG_OUTPUTFILE
    fi
}

function ERROR {
    >&2 echo "ERROR: $*" 
}

function EXIT {
    # Wait for all threads to finish
    wait

    if ! $ARG_NOFILE; then
	echo "Results are stored in: $ARG_OUTPUTFILE"
    fi
    exit
}
# Catch Ctrl+c to exit properly
trap EXIT SIGINT

################################################################################
# FUNCTIONS TO RUN ON RANGES :)                                                #
################################################################################

function help {
    echo "\
list    List all IP addresses in a range
ping    Run ping on a range
host	Run host on a range
admin   Extract the list of local administrators on Windows hosts on a range
	additional args: -d [domain] -u [username] -p [password]

 options to netcommands:
-n 	Do not store results to a file
-o name Change the name of the output file (default: <range>.<cmd>.<date>.mish): 
-t num  Number of threads to use (default is $ARG_MAXTHREAD)

$HELP
These netcommands run a basic network discovery commands on a range
(multithreaded) and output the results to a file (by default).

"
}

#--- Ping ---------------------------------------------------------------------#

function mish_ping {
  ip=$1
  ping -c 1 $ip > /dev/null 2>&1
  if [ $? -eq 0 ]; then
      OUTPUT "$ip"
  fi
}

function mish_host {
    out=$(host $1)
    if [ $? -eq 00 ]; then
	OUTPUT "$ip: $(echo ${out%%\.} | awk '/domain name pointer/{print $NF}')"
    fi
}

function mish_admin {
    ip=$1
    adm="Administrateurs"
    if $ARG_ENGLISH; then
	adm="Administrators"
    fi
    out=$(net rpc group members $adm -W $ARG_DOMAIN -U $ARG_DOMAIN\\$ARG_USER%$ARG_PASSWD -I $ip)
    if [ $? -eq 00 ]; then
	OUTPUT "--- $ip ---"
	OUTPUT "$out"
    fi
}

################################################################################
# MAIN PROGRAM                                                                 #
################################################################################

#--- Read arguments -----------------------------------------------------------#

# The first argument should be the command to run on range
if [[ $# -eq 0 ]]; then
    ERROR "$ERROR_COMMAND"
    exit
fi

if [[ $1 == "help" ]]; then
    help
    exit
elif echo "$NETCOMMAND_LIST" | grep -qw $1; then
    ARG_COMMAND="$1"
    shift
else
    ERROR "$ERROR_COMMAND"
    exit
fi

# Then read the rest
while [[ $# -gt 0 ]]; do
    case "$1" in
	-t|--thread)
	    shift
	    if [[ "$1" =~ ^[0-9]+$ ]]; then
	       if [[ "$1" -ge 0 && "$1" -lt $THREAD_LIMIT ]]; then
		   ARG_MAXTHREAD="$1"
	       else
		   ERROR "$ERROR_THREAD"
	       fi
	    fi
	    shift
	    ;;
	-n|--nofile)
	    ARG_NOFILE=true
	    shift
	    ;;
	-o|--output)
	    shift
	    ARG_OUTPUTFILE="$1"
	    shift
	    ;;
	-en|--english)
	    ARG_ENGLISH=true
	    shift
	    ;;
	-d|--domain)
	    shift
	    ARG_DOMAIN="$1"
	    shift
	    ;;
	-u|--user)
	    shift
	    ARG_USER="$1"
	    shift
	    ;;
	-p|--password)
	    shift
	    ARG_PASSWD="$1"
	    shift
	    ;;
	*)
	    # Should be the IP address, we don't check for it and let nmap see
	    # if it is valid, otherwise the regex would be too complicated to
	    # cover all accepted formats.
	    ARG_IPRANGE="$1"
	    shift
	    ;;
    esac
done

#--- Prepare command to run ---------------------------------------------------#

COMMAND=""
if [[ $ARG_COMMAND == "ping" ]]; then
    COMMAND=mish_ping
elif [[ $ARG_COMMAND == "host" ]]; then
    COMMAND=mish_host
elif [[ $ARG_COMMAND == "admin" ]]; then
    if [[ -z $ARG_DOMAIN || -z $ARG_USER || -z $ARG_PASSWD ]]; then
	ERROR "Missing arguments for \"admin\" mode (requires -d, -u, -p)."
	exit
    fi
    COMMAND=mish_admin
fi

#--- Prepare IP list with nmap ------------------------------------------------#

IPLIST=$(nmap -sL -n "$ARG_IPRANGE" | awk '/Nmap scan report/{print $NF}')

# Error check before going further :)
if [[ -z $IPLIST ]]; then
    ERROR "$ERROR_IPRANGE"
    exit
fi

#--- Prepare output file if -n not set ----------------------------------------#

if ! $ARG_NOFILE; then
    if [[ -z $ARG_OUTPUTFILE ]]; then
	outrange=$(echo "$ARG_IPRANGE" | sed -r 's/[/]+/_/g')
	ARG_OUTPUTFILE="$outrange.$ARG_COMMAND.`date +%Y%m%d-%H%M%S`.$MISH_ALIAS"
    fi
    # Output files are stored to the env's current traces dir if enabled.
    # If not, files are stored on the current working directory.
    if [[ "$ENV_MISHCMD" != "" ]]; then
	# If the source IP address is set on current interface, we store traces
	# in a subfolder with the IP source, otherwire directly in traces folder.
	if [[ "$ENV_MISHIP" != "" ]]; then
	    mkdir -p "$ENV_MISHCMD/$ENV_MISHIP/"
	    ARG_OUTPUTFILE="$ENV_MISHCMD/$ENV_MISHIP/$ARG_OUTPUTFILE"
	else
	    ARG_OUTPUTFILE="$ENV_MISHCMD/$ARG_OUTPUTFILE"
	fi
    fi
    touch "$ARG_OUTPUTFILE"
fi

#--- If command is "list", mish stops here and just return the result ---------#

if [[ $ARG_COMMAND == "list" ]]; then
    OUTPUT "$IPLIST"
    exit
fi    

#--- Loop over the IP range and spawn background tasks up to $ARG_MAXTHREAD ---#

for ip in $IPLIST; do
    # If max number of threads is reached, wait
    while [[ $(jobs -r | wc -l) -gt $ARG_MAXTHREAD ]]; do
	sleep 1
    done
    $COMMAND $ip &
done

EXIT
